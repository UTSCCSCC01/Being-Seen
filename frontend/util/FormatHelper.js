import { Alert, Linking, Platform } from "react-native";

/**
 * Capitalize the first character of str.
 * @param {string} str The string to convert.
 * @returns str with its first character capitalized. If str is null, returns the
 *          empty string.
 */
export function capitalize(str) {
  return (str && str[0].toUpperCase() + str.slice(1)) || "";
}

/**
 * Extract the names of an array of tags and put them into a comma-seperated string.
 * @param {Tag[]} tags array of tags for a shelter
 * @returns A string containing the names of the tags.
 *
 */
export function getTags(tags) {
  let toRet = "";
  for (let i = 0; i < tags.length; i += 1) {
    toRet += tags[i].tagName;
    if (i !== tags.length - 1) toRet += ", ";
  }
  return toRet;
}

/**
 * Reformat a date string generated by the Date() function into the following
 * human-readable format:
 *   `${Day-in-Week} ${Month} ${Date}, ${Year}`
 * @param {string} dateString A string generated by the Date() function.
 * @returns A readable format of the date represented by dateString.
 */
export function formatDate(dateString) {
  const date = new Date(dateString);
  const weekdays = [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
  ];
  const months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];
  return `${weekdays[date.getDay()]} ${
    months[date.getMonth()]
  } ${date.getDate()}, ${date.getFullYear()}`;
}

/**
 * Redirects the user to the Phone app on their phone.
 * @param {string} phone The phone number.
 * @returns A Promise object. If the user confirms the open dialog or the url
 *          automatically opens, the promise is resolved. If the user cancels
 *          the open dialog or there are no registered applications for the
 *          url, the promise is rejected.
 */
export function openPhone(phone) {
  let phoneNumber;
  if (Platform.OS !== "android") {
    phoneNumber = `telprompt:${phone}`;
  } else {
    phoneNumber = `tel:${phone}`;
  }
  return Linking.openURL(phoneNumber);
}

export function openWhatsApp(phone) {
  const url = `whatsapp://send?text=Hello From Being Seen&phone=+1${phone}`;
  Linking.canOpenURL(url)
    .then((installed) => {
      if (!installed) {
        Alert.alert(
          "Please install whats app to send direct message to students via whatsapp"
        );
      } else {
        return Linking.openURL(url);
      }
      return false;
    })
    .catch((err) => console.error(err));
}

export function openPhoneNumber(phone) {
  return Alert.alert("", "", [
    {
      text: "Cancel",
      onPress: () => {},
    },
    { text: "Open in Phone App", onPress: () => openPhone(phone) },

    {
      text: "Open in WhatsApp",
      onPress: () => openWhatsApp(phone),
    },
  ]);
}

const queryToName = {
  merchant: "Merchants",
  job: "Jobs",
  shelter: "Social Services",
  education: "Education",
};

export function getScreenNameFromQuery(query) {
  const key = query.toLowerCase().replace(" ", "_");
  return queryToName[key];
}
